import os
import json
import requests
from db.mongo import inputs

from datetime import datetime,timedelta
import re
from utils import name_mapper
from scripts.nlp import check_if_cta,set_due_dates

# config = {
#   "authority": "https://login.microsoftonline.com/598303e8-e38d-47da-9d2c-1a42ab2651c9",
#   "client_id": "e658bc45-5e57-4236-9751-b328f0d658d2",
#   "scope": [ "https://graph.microsoft.com/.default" ],
#   "secret": "The secret generated by AAD during your confidential app registration",
#   "endpoint": "https://graph.microsoft.com/v1.0/users"
# }


class OutlookWorker:
    def refresh_token(refreshToken):

        url = "https://login.microsoftonline.com/common/oauth2/v2.0/token"

        payload = 'client_id=e658bc45-5e57-4236-9751-b328f0d658d2&scope=user.read&refresh_token='+refreshToken+'&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Foutlook&grant_type=refresh_token&client_secret=6FZ5QcXl5w8m28_2g.vnl.I-b6~mYliDS6'
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
        }

        response = requests.request("POST", url, headers=headers, data=payload)
        print(response.text)
        return response.json()
    def check(self):
        print('')
    def get_folder(token,id):
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer " + token}
        r = requests.get(base_url + 'v1.0/me/mailFolders/'+id, headers=headers)
        data = r.json()
        if "displayName" in data:
            if "דואר נכנס" in data["displayName"] or "inbox" in data["displayName"] or "Inbox" in data["displayName"]:
                return True
        return False
    def get_folders(token):
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer " + token}
        r = requests.get(base_url + 'v1.0/me/mailFolders',headers=headers)
        data = r.json()
        d = {}
        for k in data["value"]:
            print("-------------------------")
            print(k)
            print("-------------")
            d[k["id"]] = k["displayName"]
            rr = requests.get(base_url+'v1.0/me/mailFolders/'+k["id"]+"/childFolders",headers=headers)
            ddata = rr.json()
            for kk in ddata["value"]:
                print(kk)


        return d
    def load_data_set(token):
        array = []
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer " + token}
        r = requests.get(base_url + 'v1.0/me/messages?$filter=ReceivedDateTime ge 2020-08-01 and receivedDateTime lt 2020-11-01&top=600', headers=headers)
        data = r.json()
        counter = 0
        print(data)
        for mail in data["value"]:
            print(mail)
            counter += 1

            senders = []
            for ass in mail["toRecipients"]:
                senders.append(ass["emailAddress"]["address"])
            if "from" in mail:
                senders.append(mail["from"]["emailAddress"]["address"])
            # """
            creator = None
            if "sender" in mail:
                creator = mail["sender"]["emailAddress"]["address"]
            obj = {
                "action_id": None,
                "key": None,
                "project_id": mail["conversationId"],
                "issue_status_id": '',
                "summary": mail["subject"],
                "created_at":mail["sentDateTime"],
                "updated": mail["lastModifiedDateTime"],
                "description": mail["bodyPreview"],
                "due_date": None,
                "resolution": None,
                "resolution_date": None,
                "priority": None,
                "issue_type": None,
                "assignee": senders,
                "watches": None,
                "labels": [],
                "url": None,
                "fix_version": None,
                "origin_type": "outlook_email",
                "user_id": 11,
                "project_name": None,
                "closed": None,
                "project_closed": None,
                "issue_status_name": None,
                "issue_status_closed": None,
                "topic": None,
                "start_date": None,
                "time_estimate": None,
                "due_complete": None,
                "id_labels": None,
                "creator":creator,
                "client": None,
                "server": None,
                "board_last_activity": None,
            }
            array.append(obj)
        return array
    def get_all_folders(token):
        array = []
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer "+token}
        r = requests.get(base_url+'v1.0/me/messages?top=200',headers=headers)
        data = r.json()
        # print(data)
        counter = 0
        for mail in data["value"]:
            # print(mail)
            OutlookWorker.get_folder(token,mail["parentFolderId"])
    def load_data_email(token,db,user):
        # Outlook.get_folders(token)
        # return ''
        array = []
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer "+token}
        r = requests.get(base_url+'v1.0/me/messages?top=200',headers=headers)
        data = r.json()
        print(data)
        counter = 0
        for mail in data["value"]:
            print(mail)
            counter += 1

            senders = []
            for ass in mail["toRecipients"]:
                senders.append(ass["emailAddress"]["address"])
            if "from" in mail:
                senders.append(mail["from"]["emailAddress"]["address"])
            # """
            creator = None
            if "sender" in mail:
                creator = mail["sender"]["emailAddress"]["address"]
            obj = {
                "action_id": mail["id"],
                "key": None,
                "project_id": mail["conversationId"],
                "issue_status_id": '',
                "summary": mail["subject"],
                "created_at":mail["sentDateTime"],
                "updated": mail["lastModifiedDateTime"],
                "description": mail["bodyPreview"],
                "parentFolderId":mail["parentFolderId"],
                "due_date": None,
                "resolution": None,
                "resolution_date": None,
                "priority": None,
                "issue_type": None,
                "assignee": senders,
                "watches": None,
                "labels": [],
                "url": mail["webLink"],
                "fix_version": None,
                "origin_type": "outlook_email",
                "user_id": user["_id"],
                "user_email":user["email"],
                "project_name": None,
                "closed": None,
                "project_closed": None,
                "issue_status_name": None,
                "issue_status_closed": None,
                "topic": None,
                "start_date": None,
                "time_estimate": None,
                "due_complete": None,
                "id_labels": None,
                "creator":creator,
                "client": None,
                "server": None,
                "board_last_activity": None,
                "is_waiting":False
            }
            array.append(obj)

        db.insert_many(array)


    def get_all_emails(token,user):
        # get the token
        access_token = OutlookWorker.refresh_token(token)
        # /me/mailFolders/{id}/messages
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer " + access_token["access_token"]}
        r = requests.get(base_url + 'v1.0/me/messages?top=50', headers=headers)
        data = r.json()
        array = []
        relevantFolder = ''
        counter = 0
        for mail in data["value"]:
            counter += 1
            # printx(mail)
            if counter > 5:
                access_token = OutlookWorker.refresh_token(token)
                counter = 0
            if(OutlookWorker.get_folder(access_token["access_token"],mail["parentFolderId"])):

                senders = []

                for ass in mail["toRecipients"]:
                    senders.append(ass["emailAddress"]["address"])
                if "from" in mail:
                    senders.append(mail["from"]["emailAddress"]["address"])
                # """
                creator = None
                if "sender" in mail:
                    creator = mail["sender"]["emailAddress"]["address"]
                body = mail["bodyPreview"]
                if "content" in mail["body"]:
                    body = mail["body"]["content"]
                obj = {
                    "action_id": mail["id"],
                    "key": None,
                    "project_id": mail["conversationId"],
                    "issue_status_id": '',
                    "summary": mail["subject"].replace("Re:",'').replace("RE:",'').replace("re:",'').replace("Fwd:",''),
                    "created_at": datetime.strptime(mail["sentDateTime"], "%Y-%m-%dT%H:%M:%SZ"),
                    "updated": datetime.strptime(mail["lastModifiedDateTime"], "%Y-%m-%dT%H:%M:%SZ"),
                    "description": body,
                    "parentFolderId": mail["parentFolderId"],
                    "due_date": None,
                    "resolution": None,
                    "resolution_date": None,
                    "priority": None,
                    "issue_type": None,
                    "assignee": senders,
                    "watches": None,
                    "labels": [],
                    "url": mail["webLink"],
                    "fix_version": None,
                    "origin_type": "outlook_email",
                    "user_id": user["_id"],
                    "user_email": user["email"],
                    "project_name": None,
                    "closed": None,
                    "project_closed": None,
                    "issue_status_name": None,
                    "issue_status_closed": None,
                    "topic": None,
                    "start_date": None,
                    "time_estimate": None,
                    "due_complete": None,
                    "id_labels": None,
                    "creator": creator,
                    "client": None,
                    "server": None,
                    "board_last_activity": None,
                    "is_waiting": False
                }
                obj["due_date"] = set_due_dates(mail["bodyPreview"])
                name_opt = {"eng": "", "heb": ""}
                for n in name_mapper:
                    if n["eng"] == user["given_name"].lower() or n["heb"] == user["given_name"]:
                        name_opt = n
                obj["is_waiting"], obj["reason"] = check_if_cta(mail["bodyPreview"], name_opt, senders, user["email"])

                inputs.find_one_and_update({"action_id":mail["id"],"user_email":user["email"]},{"$set":obj},upsert=True)
        # get the relevant folder


    def get_userinfo(token):
        access_token = OutlookWorker.refresh_token(token["refresh_token"])
        base_url = 'https://graph.microsoft.com/'
        headers = {"Authorization": "Bearer " + access_token["access_token"]}
        r = requests.get(base_url + 'v1.0/me', headers=headers)
        data = r.json()
        print(data)
        email = ''
        if data["mail"]:
            email = data["mail"]
        else:
            email = data["userPrincipalName"]
        user = {
            "id":str(data["id"]),
            "email":email,
            "verified_email":email,
            "name":data["displayName"],
            "given_name":data["givenName"],
            "family_name":data["surname"],
            "picture":'',
            "locale":data["officeLocation"],
            "code":token,
            "platform":"microsoft"
        }
        return user